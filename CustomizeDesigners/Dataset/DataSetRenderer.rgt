<%@ Template Language="C#" ClassName="DataSetRenderer" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="Kodeo.Reegenerator" %>
<%@ Import Namespace="Kodeo.Reegenerator.Wrappers" %>
 
// -------------------------------------------------------
// Automatically generated with Kodeo's Reegenerator
// Generator: CustomizeDesigners.Dataset.DataSetRenderer 
// Generation date: <%= System.DateTime.Now.ToString("yyyy-MM-dd hh:mm") %>
// Generated by: <%= System.Security.Principal.WindowsIdentity.GetCurrent().Name %>
// -------------------------------------------------------


namespace <%= base.ProjectItem.CodeNamespace %> {

    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("<%= this._dataSet.DataSetName %>")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class <%= this._dataSet.DataSetName %> : global::System.Data.DataSet {
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
        private <%= TableClassName(table) %> <%= TableVarName(table) %>;
<% } %>
<% foreach (System.Data.DataRelation relation in this._dataSet.Relations) { %>
        private global::System.Data.DataRelation relation<%= FixName(relation.RelationName) %>;
<% } %>        

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public <%= this._dataSet.DataSetName %>() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected <%= this._dataSet.DataSetName %>(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
                if ((ds.Tables["<%= UserTableName(table) %>"] != null)) {
                    base.Tables.Add(new <%= TableClassName(table) %>(ds.Tables["<%= UserTableName(table) %>"]));
                }
<% } %>        
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public <%= TableClassName(table) %> <%= TablePropName(table) %> {
            get {
                return this.<%= TableVarName(table) %>;
            }
        }
<% } %>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            <%= this._dataSet.DataSetName %> cln = ((<%= this._dataSet.DataSetName %>)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
                if ((ds.Tables["<%= UserTableName(table) %>"] != null)) {
                    base.Tables.Add(new <%= TableClassName(table) %>(ds.Tables["<%= UserTableName(table) %>"]));
                }
<% } %>        
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
         
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
       
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
            this.<%= TableVarName(table) %> = ((<%= TableClassName(table) %>)(base.Tables["<%= UserTableName(table) %>"]));
            if ((initTable == true)) {
                if ((this.<%= TableVarName(table) %> != null)) {
                    this.<%= TableVarName(table) %>.InitVars();
                }
            }
<% } %>        
<% foreach (System.Data.DataRelation relation in this._dataSet.Relations) { %>
            this.relation<%= FixName(relation.RelationName) %> = this.Relations["<%= relation.RelationName %>"];
<% } %>        
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "<%= this._dataSet.DataSetName %>";
            this.Prefix = "";
            this.Namespace = "<%= this._dataSet.Namespace %>";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
            this.<%= TableVarName(table) %> = new <%= TableClassName(table) %>();
            base.Tables.Add(this.<%= TableVarName(table) %>);
<% } %>
<%  foreach (System.Data.DataTable table in this._dataSet.Tables) { 
        foreach (System.Data.Constraint constraint in table.Constraints) { 
            System.Data.ForeignKeyConstraint fkc = constraint as System.Data.ForeignKeyConstraint;
                if (fkc == null)
                    continue; %>
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("<%= fkc.ConstraintName %>", new global::System.Data.DataColumn[] {
                        <%= RenderConstraintColumns(fkc.RelatedColumns) %>}, new global::System.Data.DataColumn[] {
                        <%= RenderConstraintColumns(fkc.Columns) %>});
            this.<%= TableVarName(table) %>.Constraints.Add(fkc);
            fkc.AcceptRejectRule = <%= RenderEnumItem(fkc.AcceptRejectRule) %>;
            fkc.DeleteRule = <%= RenderEnumItem(fkc.DeleteRule) %>;
            fkc.UpdateRule = <%= RenderEnumItem(fkc.UpdateRule) %>;
<% } } %>
<% foreach (System.Data.DataRelation relation in this._dataSet.Relations) { %>
            this.relation<%= FixName(relation.RelationName) %> = new global::System.Data.DataRelation("<%= relation.RelationName %>", new global::System.Data.DataColumn[] {
                        <%= RenderConstraintColumns(relation.ParentColumns) %>}, new global::System.Data.DataColumn[] {
                        <%= RenderConstraintColumns(relation.ChildColumns) %>}, false);
            <% if (relation.Nested) { %>this.relation<%= FixName(relation.RelationName) %>.Nested = true; <% } %>     
            this.Relations.Add(this.relation<%= FixName(relation.RelationName) %>);
<% } %>
        }
<% foreach (System.Data.DataTable table in this._dataSet.Tables) { %>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize<%= TablePropName(table) %>() {
            return false;
        }
<% } %>        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            <%= this._dataSet.DataSetName %> ds = new <%= this._dataSet.DataSetName %>();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
<% 
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTableRowChangeEventHandler(table);
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTable(table);
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTableRow(table);
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTableRowChangeEvent(table);
%>        
   }
}

<%@ Method Name="RenderTableRowChangeEventHandler" %>
    <%@ Parameter Name="table" Type="System.Data.DataTable" %>
        public delegate void <%= RowChangeEventHandlerName(table) %>(object sender, <%= RowChangeEventName(table) %> e);
<%/ Method %>

<%@ Method Name="RenderTable" %>
    <%@ Parameter Name="table" Type="System.Data.DataTable" %>
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class <%= TableClassName(table) %> : global::System.Data.TypedTableBase< <%= RowClassName(table) %> > {
<% foreach (System.Data.DataColumn column in table.Columns) { %>
            private global::System.Data.DataColumn column<%= column.ColumnName %>;
<% } %>        
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= TableClassName(table) %>() {
                this.TableName = "<%= UserTableName(table) %>";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal <%= TableClassName(table) %>(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected <%= TableClassName(table) %>(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
<% foreach (System.Data.DataColumn column in table.Columns) { %>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn <%= column.ColumnName %>Column {
                get {
                    return this.column<%= column.ColumnName %>;
                }
            }
<% } %>        
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(table) %> this[int index] {
                get {
                    return ((<%= RowClassName(table) %>)(this.Rows[index]));
                }
            }
            
            public event <%= RowChangeEventHandlerName(table) %> <%= RowChangingName(table) %>;
            
            public event <%= RowChangeEventHandlerName(table) %> <%= RowChangedName(table) %>;
            
            public event <%= RowChangeEventHandlerName(table) %> <%= RowDeletingName(table) %>;
            
            public event <%= RowChangeEventHandlerName(table) %> <%= RowDeletedName(table) %>;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add<%= RowClassName(table) %>(<%= RowClassName(table) %> row) {
                this.Rows.Add(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(table) %> Add<%= RowClassName(table) %>(<%= this.RenderAddRowParameters(table.Columns)%>) {
                <%= RowClassName(table) %> row<%= RowClassName(table) %> = ((<%= RowClassName(table) %>)(this.NewRow()));
                <%= DecorateMultiLine("\t\t\t\t{0}", RenderAddRowArray(table.Columns)) %>
                row<%= RowClassName(table) %>.ItemArray = columnValuesArray;
                this.Rows.Add(row<%= RowClassName(table) %>);
                return row<%= RowClassName(table) %>;
            }
<% if (table.PrimaryKey != null && table.PrimaryKey.Length > 0) { %>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(table) %> FindBy<%= GetColumnsAsNameList(table.PrimaryKey) %>(<%= GetColumnsAsParameters(table.PrimaryKey) %>) {
                return ((<%= RowClassName(table) %>)(this.Rows.Find(new object[] {
                            <%= GetColumnsAsArray(table.PrimaryKey) %>})));
            }
<% } %>  
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                <%= TableClassName(table) %> cln = ((<%= TableClassName(table) %>)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new <%= TableClassName(table) %>();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
<% foreach (System.Data.DataColumn column in table.Columns) { %>
                this.column<%= column.ColumnName %> = base.Columns["<%= column.ColumnName %>"];
<% } %>        
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
<%    foreach (System.Data.DataColumn column in table.Columns) { %>
                this.column<%= column.ColumnName %> = new global::System.Data.DataColumn("<%= column.ColumnName %>", typeof(<%= LangType(column.DataType).Replace("System.", "global::System.") %>), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column<%= column.ColumnName %>);
<%    } 
    foreach (System.Data.Constraint constraint in table.Constraints) { 
        System.Data.UniqueConstraint uc = constraint as System.Data.UniqueConstraint;
        if (true && uc == null) 
            continue; %>
                this.Constraints.Add(new global::System.Data.UniqueConstraint("<%= uc.ConstraintName %>", new global::System.Data.DataColumn[] {
                                <%= RenderUniqueConstraintColumns(uc.Columns) %>}, <%= uc.IsPrimaryKey.ToString().ToLower() %>));
<%    } 
    foreach (System.Data.DataColumn column in table.Columns) { 
        if (column.AutoIncrement) { %>
                this.column<%= column.ColumnName %>.AutoIncrement = true;
                this.column<%= column.ColumnName %>.AutoIncrementSeed = <%= column.AutoIncrementSeed %>;
                this.column<%= column.ColumnName %>.AutoIncrementStep = <%= column.AutoIncrementStep %>;
    <%    } if (!column.AllowDBNull) { %>
                this.column<%= column.ColumnName %>.AllowDBNull = false;
    <%    } if (column.ReadOnly) { %>
                this.column<%= column.ColumnName %>.ReadOnly = true;
    <%    } if (column.Unique) { %>
                this.column<%= column.ColumnName %>.Unique = true;
    <%    } if (column.MaxLength != -1) { %>
                this.column<%= column.ColumnName %>.MaxLength = <%= column.MaxLength %>;
<%        }
    } %>
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(table) %> New<%= RowClassName(table) %>() {
                return ((<%= RowClassName(table) %>)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new <%= RowClassName(table) %>(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(<%= RowClassName(table) %>);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.<%= RowChangedName(table) %> != null)) {
                    this.<%= RowChangedName(table) %>(this, new <%= RowClassName(table) %>ChangeEvent(((<%= RowClassName(table) %>)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.<%= RowChangingName(table) %> != null)) {
                    this.<%= RowChangingName(table) %>(this, new <%= RowClassName(table) %>ChangeEvent(((<%= RowClassName(table) %>)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.<%= RowDeletedName(table) %> != null)) {
                    this.<%= RowDeletedName(table) %>(this, new <%= RowClassName(table) %>ChangeEvent(((<%= RowClassName(table) %>)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.<%= RowDeletingName(table) %> != null)) {
                    this.<%= RowDeletingName(table) %>(this, new <%= RowClassName(table) %>ChangeEvent(((<%= RowClassName(table) %>)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove<%= RowClassName(table) %>(<%= RowClassName(table) %> row) {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                <%= table.DataSet.DataSetName %> ds = new <%= table.DataSet.DataSetName %>();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "<%= TableClassName(table) %>";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
<%/ Method %>

<%@ Method Name="RenderTableRow" %>
    <%@ Parameter Name="table" Type="System.Data.DataTable" %>
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class <%= RowClassName(table) %> : global::System.Data.DataRow {
            
            private <%= TableClassName(table) %> <%= TableVarName(table) %>;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal <%= RowClassName(table) %>(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.<%= TableVarName(table) %> = ((<%= TableClassName(table) %>)(this.Table));
            }
<% foreach (System.Data.DataColumn column in table.Columns) { %>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= LangType(column.DataType) %> <%= column.ColumnName %> {
                get {
    <% if (column.AllowDBNull) {%>
                    try {
                        return ((<%= LangType(column.DataType).Replace("System.", "global::System.") %>)(this[this.<%= TableVarName(table) %>.<%= column.ColumnName %>Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<%= column.ColumnName %>\' in table \'<%= table.TableName %>\' is DBNull.", e);
                    }
    <% } else { %>
                    return ((<%= LangType(column.DataType) %>)(this[this.<%= TableVarName(table) %>.<%= column.ColumnName %>Column]));
    <% } %>
                }
                set {
                    this[this.<%= TableVarName(table) %>.<%= column.ColumnName %>Column] = value;
                }
            }
<% } %>
<% foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
    if (relation.ChildTable != table)
        continue;
%>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= relation.ParentTable.TableName %>Row <%= relation.ParentTable.TableName %>Row<%= (RowClassName(table) == relation.ParentTable.TableName + "Row") ? "Parent" : "" %> {
                get {
                    return ((<%= relation.ParentTable.TableName %>Row)(this.GetParentRow(this.Table.ParentRelations["<%= relation.RelationName %>"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["<%= relation.RelationName %>"]);
                }
            }
<% } %>        
<% foreach (System.Data.DataColumn column in table.Columns) 
    if (column.AllowDBNull) { %>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is<%= column.ColumnName %>Null() {
                return this.IsNull(this.<%= TableVarName(table) %>.<%= column.ColumnName %>Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set<%= column.ColumnName %>Null() {
                this[this.<%= TableVarName(table) %>.<%= column.ColumnName %>Column] = global::System.Convert.DBNull;
            }
<% } %>
<% foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
    if (relation.ParentTable != table)
        continue;
%>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(relation.ChildTable) %>[] Get<%= TablePropName(relation.ChildTable) %>Rows() {
                if ((this.Table.ChildRelations["<%= relation.RelationName %>"] == null)) {
                    return new <%= RowClassName(relation.ChildTable) %>[0];
                }
                else {
                    return ((<%= RowClassName(relation.ChildTable) %>[])(base.GetChildRows(this.Table.ChildRelations["<%= relation.RelationName %>"])));
                }
            }
<% } %>        
        }
<%/ Method %>


<%@ Method Name="RenderTableRowChangeEvent" %>
    <%@ Parameter Name="table" Type="System.Data.DataTable" %>
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class <%= RowClassName(table) %>ChangeEvent : global::System.EventArgs {
            
            private <%= RowClassName(table) %> eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(table) %>ChangeEvent(<%= RowClassName(table) %> row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public <%= RowClassName(table) %> Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
<%/ Method %>
