// -------------------------------------------------------
// Automatically generated with Kodeo's Reegenerator
// Generator: RgenTemplate (internal)
// Generation date: 2014-01-21 11:06
// Generated by: GATSU-DEV\Tedy.Pranolo
// -------------------------------------------------------
namespace CustomizeDesigners.Dataset
{
    using System;
    using Kodeo.Reegenerator;
    using Kodeo.Reegenerator.Wrappers;
    using System.Xml.Linq;
    using System.Xml.XPath;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reegenerator", "2.0.5.0")]
    public partial class DataSetRenderer : Kodeo.Reegenerator.Generators.CodeRenderer
    {
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<returns></returns>
        public override Kodeo.Reegenerator.Generators.RenderResults Render()
        {
            this.Output.Write("// -------------------------------------------------------\r\n// Automatically gene" +
                    "rated with Kodeo\'s Reegenerator\r\n// Generator: CustomizeDesigners.Dataset.DataSe" +
                    "tRenderer \r\n// Generation date: ");
            this.Output.Write( System.DateTime.Now.ToString("yyyy-MM-dd hh:mm") );
            this.Output.Write("\r\n// Generated by: ");
            this.Output.Write( System.Security.Principal.WindowsIdentity.GetCurrent().Name );
            this.Output.Write("\r\n// -------------------------------------------------------\r\n\r\n#pragma warning d" +
                    "isable 1591\r\nnamespace ");
            this.Output.Write( base.ProjectItem.CodeNamespace );
            this.Output.Write(@" {

    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute(""code"")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute(""GetTypedDataSetSchema"")]
    [global::System.Xml.Serialization.XmlRootAttribute(""");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write("\")]\r\n    [global::System.ComponentModel.Design.HelpKeywordAttribute(\"vs.data.Data" +
                    "Set\")]\r\n    public partial class ");
            this.Output.Write(this._dataSet.DataSetName );
            this.Output.Write(" : global::System.Data.DataSet {\r\n");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n        private ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(" ");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(";\r\n");
 } 
            this.Output.Write("\r\n");
 foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
            this.Output.Write("\r\n        private global::System.Data.DataRelation relation");
            this.Output.Write( FixName(relation.RelationName) );
            this.Output.Write(";\r\n");
 } 
            this.Output.Write("        \r\n\r\n        private global::System.Data.SchemaSerializationMode _schemaSe" +
                    "rializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;\r\n  " +
                    "      \r\n\t\t");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        public ");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write(@"() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
    
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n\t\t");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        protected ");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write(@"(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue(""XmlSchema"", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n                if ((ds.Tables[\"");
            this.Output.Write( UserTableName(table) );
            this.Output.Write("\"] != null)) {\r\n                    base.Tables.Add(new ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write("(ds.Tables[\"");
            this.Output.Write( UserTableName(table) );
            this.Output.Write("\"]));\r\n                }\r\n");
 } 
            this.Output.Write(@"                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        [global::System.ComponentModel.Browsable(false)]\r\n        [global::Syst" +
                    "em.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel." +
                    "DesignerSerializationVisibility.Content)]\r\n        public ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(" ");
            this.Output.Write( TablePropName(table) );
            this.Output.Write(" {\r\n            get {\r\n                return this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(";\r\n            }\r\n        }\r\n");
 } 
            this.Output.Write("\r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        protected override void InitializeDerivedDataSet() {\r\n            this." +
                    "BeginInit();\r\n            this.InitClass();\r\n            this.EndInit();\r\n      " +
                    "  }\r\n        \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        public override global::System.Data.DataSet Clone() {\r\n            ");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write(" cln = ((");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write(")(base.Clone()));\r\n            cln.InitVars();\r\n            cln.SchemaSerializati" +
                    "onMode = this.SchemaSerializationMode;\r\n            return cln;\r\n        }\r\n    " +
                    "    \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        protected override bool ShouldSerializeTables() {\r\n            return f" +
                    "alse;\r\n        }\r\n        \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        protected override bool ShouldSerializeRelations() {\r\n            retur" +
                    "n false;\r\n        }\r\n        \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n                if ((ds.Tables[\"");
            this.Output.Write( UserTableName(table) );
            this.Output.Write("\"] != null)) {\r\n                    base.Tables.Add(new ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write("(ds.Tables[\"");
            this.Output.Write( UserTableName(table) );
            this.Output.Write("\"]));\r\n                }\r\n");
 } 
            this.Output.Write(@"        
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
         
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        internal void InitVars() {\r\n            this.InitVars(true);\r\n        }" +
                    "\r\n       \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        internal void InitVars(bool initTable) {\r\n");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n            this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(" = ((");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(")(base.Tables[\"");
            this.Output.Write( UserTableName(table) );
            this.Output.Write("\"]));\r\n            if ((initTable == true)) {\r\n                if ((this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(" != null)) {\r\n                    this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".InitVars();\r\n                }\r\n            }\r\n");
 } 
            this.Output.Write("        \r\n");
 foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
            this.Output.Write("\r\n            this.relation");
            this.Output.Write( FixName(relation.RelationName) );
            this.Output.Write(" = this.Relations[\"");
            this.Output.Write( relation.RelationName );
            this.Output.Write("\"];\r\n");
 } 
            this.Output.Write("        \r\n        }\r\n        \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        private void InitClass() {\r\n            this.DataSetName = \"");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write("\";\r\n            this.Prefix = \"\";\r\n            this.Namespace = \"");
            this.Output.Write( this._dataSet.Namespace );
            this.Output.Write("\";\r\n            this.EnforceConstraints = true;\r\n            this.SchemaSerializa" +
                    "tionMode = global::System.Data.SchemaSerializationMode.IncludeSchema;\r\n");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n            this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(" = new ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write("();\r\n            base.Tables.Add(this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(");\r\n");
 } 
            this.Output.Write("\r\n");
  foreach (System.Data.DataTable table in this._dataSet.Tables) { 
        foreach (System.Data.Constraint constraint in table.Constraints) { 
            System.Data.ForeignKeyConstraint fkc = constraint as System.Data.ForeignKeyConstraint;
                if (fkc == null)
                    continue; 
            this.Output.Write("\r\n            global::System.Data.ForeignKeyConstraint fkc;\r\n            fkc = ne" +
                    "w global::System.Data.ForeignKeyConstraint(\"");
            this.Output.Write( fkc.ConstraintName );
            this.Output.Write("\", new global::System.Data.DataColumn[] {\r\n                        ");
            this.Output.Write( RenderConstraintColumns(fkc.RelatedColumns) );
            this.Output.Write("}, new global::System.Data.DataColumn[] {\r\n                        ");
            this.Output.Write( RenderConstraintColumns(fkc.Columns) );
            this.Output.Write("});\r\n            this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".Constraints.Add(fkc);\r\n            fkc.AcceptRejectRule = ");
            this.Output.Write( RenderEnumItem(fkc.AcceptRejectRule) );
            this.Output.Write(";\r\n            fkc.DeleteRule = ");
            this.Output.Write( RenderEnumItem(fkc.DeleteRule) );
            this.Output.Write(";\r\n            fkc.UpdateRule = ");
            this.Output.Write( RenderEnumItem(fkc.UpdateRule) );
            this.Output.Write(";\r\n");
 } } 
            this.Output.Write("\r\n");
 foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
            this.Output.Write("\r\n            this.relation");
            this.Output.Write( FixName(relation.RelationName) );
            this.Output.Write(" = new global::System.Data.DataRelation(\"");
            this.Output.Write( relation.RelationName );
            this.Output.Write("\", new global::System.Data.DataColumn[] {\r\n                        ");
            this.Output.Write( RenderConstraintColumns(relation.ParentColumns) );
            this.Output.Write("}, new global::System.Data.DataColumn[] {\r\n                        ");
            this.Output.Write( RenderConstraintColumns(relation.ChildColumns) );
            this.Output.Write("}, false);\r\n            ");
 if (relation.Nested) { 
            this.Output.Write("this.relation");
            this.Output.Write( FixName(relation.RelationName) );
            this.Output.Write(".Nested = true; ");
 } 
            this.Output.Write("     \r\n            this.Relations.Add(this.relation");
            this.Output.Write( FixName(relation.RelationName) );
            this.Output.Write(");\r\n");
 } 
            this.Output.Write("\r\n        }\r\n");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
            this.Output.Write("\r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        private bool ShouldSerialize");
            this.Output.Write( TablePropName(table) );
            this.Output.Write("() {\r\n            return false;\r\n        }\r\n");
 } 
            this.Output.Write("        \r\n        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDa" +
                    "taSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {\r\n            ");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write(" ds = new ");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write("();\r\n            global::System.Xml.Schema.XmlSchemaComplexType type = new global" +
                    "::System.Xml.Schema.XmlSchemaComplexType();\r\n            global::System.Xml.Sche" +
                    "ma.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence(" +
                    ");\r\n            global::System.Xml.Schema.XmlSchemaAny any = new global::System." +
                    "Xml.Schema.XmlSchemaAny();\r\n            any.Namespace = ds.Namespace;\r\n         " +
                    "   sequence.Items.Add(any);\r\n            type.Particle = sequence;\r\n            " +
                    "global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();\r\n    " +
                    "        if (xs.Contains(dsSchema.TargetNamespace)) {\r\n                global::Sy" +
                    "stem.IO.MemoryStream s1 = new global::System.IO.MemoryStream();\r\n               " +
                    " global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();\r\n    " +
                    "            try {\r\n                    global::System.Xml.Schema.XmlSchema schem" +
                    "a = null;\r\n                    dsSchema.Write(s1);\r\n                    for (glo" +
                    "bal::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespac" +
                    "e).GetEnumerator(); schemas.MoveNext(); ) {\r\n                        schema = ((" +
                    "global::System.Xml.Schema.XmlSchema)(schemas.Current));\r\n                       " +
                    " s2.SetLength(0);\r\n                        schema.Write(s2);\r\n                  " +
                    "      if ((s1.Length == s2.Length)) {\r\n                            s1.Position =" +
                    " 0;\r\n                            s2.Position = 0;\r\n                            f" +
                    "or (; ((s1.Position != s1.Length) \r\n                                        && (" +
                    "s1.ReadByte() == s2.ReadByte())); ) {\r\n                                ;\r\n      " +
                    "                      }\r\n                            if ((s1.Position == s1.Leng" +
                    "th)) {\r\n                                return type;\r\n                          " +
                    "  }\r\n                        }\r\n                    }\r\n                }\r\n      " +
                    "          finally {\r\n                    if ((s1 != null)) {\r\n                  " +
                    "      s1.Close();\r\n                    }\r\n                    if ((s2 != null)) " +
                    "{\r\n                        s2.Close();\r\n                    }\r\n                }" +
                    "\r\n            }\r\n            xs.Add(dsSchema);\r\n            return type;\r\n      " +
                    "  }\r\n");
 
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTableRowChangeEventHandler(table);
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTable(table);
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTableRow(table);
        foreach (System.Data.DataTable table in this._dataSet.Tables)
            RenderTableRowChangeEvent(table);

            this.Output.Write("        \r\n   }\r\n}\r\n\r\n");
 RenderTableAdapters(); 
            this.Output.Write("\r\n#pragma warning restore 1591");
            this.Output.WriteLine();
            return new Kodeo.Reegenerator.Generators.RenderResults(this.Output.ToString());
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="table"></param>
        public virtual void RenderTableRowChangeEventHandler(System.Data.DataTable table)
        {
            this.Output.Write("\t    ");
            this.Output.Write( GeneratedCodeAttribute );
            this.Output.Write("\r\n        public delegate void ");
            this.Output.Write( RowChangeEventHandlerName(table) );
            this.Output.Write("(object sender, ");
            this.Output.Write( RowChangeEventName(table) );
            this.Output.Write(" e);");
            this.Output.WriteLine();
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="table"></param>
        public virtual void RenderTable(System.Data.DataTable table)
        {
            this.Output.Write(@"        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute(""GetTypedTableSchema"")]
        public partial class ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(" : global::System.Data.TypedTableBase< ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" > {\r\n");
 foreach (System.Data.DataColumn column in table.Columns) { 
            this.Output.Write("\r\n            private global::System.Data.DataColumn column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(";\r\n");
 } 
            this.Output.Write("        \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write("() {\r\n                this.TableName = \"");
            this.Output.Write( UserTableName(table) );
            this.Output.Write("\";\r\n                this.BeginInit();\r\n                this.InitClass();\r\n       " +
                    "         this.EndInit();\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            internal ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(@"(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write("(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runt" +
                    "ime.Serialization.StreamingContext context) : \r\n                    base(info, c" +
                    "ontext) {\r\n                this.InitVars();\r\n            }\r\n");
 foreach (System.Data.DataColumn column in table.Columns) { 
            this.Output.Write("\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public global::System.Data.DataColumn ");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Column {\r\n                get {\r\n                    return this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(";\r\n                }\r\n            }\r\n");
 } 
            this.Output.Write("        \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            [global::System.ComponentModel.Browsable(false)]\r\n            publi" +
                    "c int Count {\r\n                get {\r\n                    return this.Rows.Count" +
                    ";\r\n                }\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" this[int index] {\r\n                get {\r\n                    return ((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(this.Rows[index]));\r\n                }\r\n            }\r\n            \r\n\t\t\t");
            this.Output.Write( GeneratedCodeAttribute );
            this.Output.Write("\r\n            public event ");
            this.Output.Write( RowChangeEventHandlerName(table) );
            this.Output.Write(" ");
            this.Output.Write( RowChangingName(table) );
            this.Output.Write(";\r\n            \r\n\t\t\t");
            this.Output.Write( GeneratedCodeAttribute );
            this.Output.Write("\r\n            public event ");
            this.Output.Write( RowChangeEventHandlerName(table) );
            this.Output.Write(" ");
            this.Output.Write( RowChangedName(table) );
            this.Output.Write(";\r\n            \r\n\t\t\t");
            this.Output.Write( GeneratedCodeAttribute );
            this.Output.Write("\r\n            public event ");
            this.Output.Write( RowChangeEventHandlerName(table) );
            this.Output.Write(" ");
            this.Output.Write( RowDeletingName(table) );
            this.Output.Write(";\r\n            \r\n\t\t\t");
            this.Output.Write( GeneratedCodeAttribute );
            this.Output.Write("\r\n            public event ");
            this.Output.Write( RowChangeEventHandlerName(table) );
            this.Output.Write(" ");
            this.Output.Write( RowDeletedName(table) );
            this.Output.Write(";\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public void Add");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("(");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" row) {\r\n                this.Rows.Add(row);\r\n            }\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" Add");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("(");
            this.Output.Write( this.RenderAddRowParameters(table.Columns));
            this.Output.Write(") {\r\n                ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" row");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" = ((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(this.NewRow()));\r\n                ");
            this.Output.Write( DecorateMultiLine("\t\t\t\t{0}", RenderAddRowArray(table.Columns)) );
            this.Output.Write("\r\n                row");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(".ItemArray = columnValuesArray;\r\n                this.Rows.Add(row");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(");\r\n                return row");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(";\r\n            }\r\n");
 if (table.PrimaryKey != null && table.PrimaryKey.Length > 0) { 
            this.Output.Write("\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" FindBy");
            this.Output.Write( GetColumnsAsNameList(table.PrimaryKey) );
            this.Output.Write("(");
            this.Output.Write( GetColumnsAsParameters(table.PrimaryKey) );
            this.Output.Write(") {\r\n                return ((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(this.Rows.Find(new object[] {\r\n                            ");
            this.Output.Write( GetColumnsAsArray(table.PrimaryKey) );
            this.Output.Write("})));\r\n            }\r\n");
 } 
            this.Output.Write("  \r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public override global::System.Data.DataTable Clone() {\r\n          " +
                    "      ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(" cln = ((");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(")(base.Clone()));\r\n                cln.InitVars();\r\n                return cln;\r\n" +
                    "            }\r\n\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override global::System.Data.DataTable CreateInstance() {" +
                    "\r\n                return new ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write("();\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            internal void InitVars() {\r\n");
 foreach (System.Data.DataColumn column in table.Columns) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(" = base.Columns[\"");
            this.Output.Write( column.ColumnName );
            this.Output.Write("\"];\r\n");
 } 
            this.Output.Write("        \r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            private void InitClass() {\r\n");
    foreach (System.Data.DataColumn column in table.Columns) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(" = new global::System.Data.DataColumn(\"");
            this.Output.Write( column.ColumnName );
            this.Output.Write("\", typeof(");
            this.Output.Write( LangType(column.DataType).Replace("System.", "global::System.") );
            this.Output.Write("), null, global::System.Data.MappingType.Element);\r\n                base.Columns." +
                    "Add(this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(");\r\n");
    } 
    foreach (System.Data.Constraint constraint in table.Constraints) { 
        System.Data.UniqueConstraint uc = constraint as System.Data.UniqueConstraint;
        if (true && uc == null) 
            continue; 
            this.Output.Write("\r\n                this.Constraints.Add(new global::System.Data.UniqueConstraint(\"" +
                    "");
            this.Output.Write( uc.ConstraintName );
            this.Output.Write("\", new global::System.Data.DataColumn[] {\r\n                                ");
            this.Output.Write( RenderUniqueConstraintColumns(uc.Columns) );
            this.Output.Write("}, ");
            this.Output.Write( uc.IsPrimaryKey.ToString().ToLower() );
            this.Output.Write("));\r\n");
    } 
    foreach (System.Data.DataColumn column in table.Columns) { 
        if (column.AutoIncrement) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".AutoIncrement = true;\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".AutoIncrementSeed = ");
            this.Output.Write( column.AutoIncrementSeed );
            this.Output.Write(";\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".AutoIncrementStep = ");
            this.Output.Write( column.AutoIncrementStep );
            this.Output.Write(";\r\n    ");
    } if (!column.AllowDBNull) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".AllowDBNull = false;\r\n    ");
    } if (column.ReadOnly) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".ReadOnly = true;\r\n    ");
    } if (column.Unique) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".Unique = true;\r\n    ");
    } if (column.MaxLength != -1) { 
            this.Output.Write("\r\n                this.column");
            this.Output.Write( column.ColumnName );
            this.Output.Write(".MaxLength = ");
            this.Output.Write( column.MaxLength );
            this.Output.Write(";\r\n");
        }
    } 
            this.Output.Write("\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" New");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("() {\r\n                return ((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(this.NewRow()));\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override global::System.Data.DataRow NewRowFromBuilder(gl" +
                    "obal::System.Data.DataRowBuilder builder) {\r\n                return new ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("(builder);\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override global::System.Type GetRowType() {\r\n            " +
                    "    return typeof(");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(");\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override void OnRowChanged(global::System.Data.DataRowCha" +
                    "ngeEventArgs e) {\r\n                base.OnRowChanged(e);\r\n                if ((t" +
                    "his.");
            this.Output.Write( RowChangedName(table) );
            this.Output.Write(" != null)) {\r\n                    this.");
            this.Output.Write( RowChangedName(table) );
            this.Output.Write("(this, new ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("ChangeEvent(((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(e.Row)), e.Action));\r\n                }\r\n            }\r\n            \r\n         " +
                    "   ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override void OnRowChanging(global::System.Data.DataRowCh" +
                    "angeEventArgs e) {\r\n                base.OnRowChanging(e);\r\n                if (" +
                    "(this.");
            this.Output.Write( RowChangingName(table) );
            this.Output.Write(" != null)) {\r\n                    this.");
            this.Output.Write( RowChangingName(table) );
            this.Output.Write("(this, new ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("ChangeEvent(((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(e.Row)), e.Action));\r\n                }\r\n            }\r\n            \r\n         " +
                    "   ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override void OnRowDeleted(global::System.Data.DataRowCha" +
                    "ngeEventArgs e) {\r\n                base.OnRowDeleted(e);\r\n                if ((t" +
                    "his.");
            this.Output.Write( RowDeletedName(table) );
            this.Output.Write(" != null)) {\r\n                    this.");
            this.Output.Write( RowDeletedName(table) );
            this.Output.Write("(this, new ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("ChangeEvent(((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(e.Row)), e.Action));\r\n                }\r\n            }\r\n            \r\n         " +
                    "   ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            protected override void OnRowDeleting(global::System.Data.DataRowCh" +
                    "angeEventArgs e) {\r\n                base.OnRowDeleting(e);\r\n                if (" +
                    "(this.");
            this.Output.Write( RowDeletingName(table) );
            this.Output.Write(" != null)) {\r\n                    this.");
            this.Output.Write( RowDeletingName(table) );
            this.Output.Write("(this, new ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("ChangeEvent(((");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(")(e.Row)), e.Action));\r\n                }\r\n            }\r\n            \r\n         " +
                    "   ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public void Remove");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("(");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" row) {\r\n                this.Rows.Remove(row);\r\n            }\r\n\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ");
            this.Output.Write( table.DataSet.DataSetName );
            this.Output.Write(" ds = new ");
            this.Output.Write( table.DataSet.DataSetName );
            this.Output.Write(@"();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = ""http://www.w3.org/2001/XMLSchema"";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = ""urn:schemas-microsoft-com:xml-diffgram-v1"";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = ""namespace"";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = ""tableTypeName"";
                attribute2.FixedValue = """);
            this.Output.Write( TableClassName(table) );
            this.Output.Write("\";\r\n                type.Attributes.Add(attribute2);\r\n                type.Partic" +
                    "le = sequence;\r\n                global::System.Xml.Schema.XmlSchema dsSchema = d" +
                    "s.GetSchemaSerializable();\r\n                if (xs.Contains(dsSchema.TargetNames" +
                    "pace)) {\r\n                    global::System.IO.MemoryStream s1 = new global::Sy" +
                    "stem.IO.MemoryStream();\r\n                    global::System.IO.MemoryStream s2 =" +
                    " new global::System.IO.MemoryStream();\r\n                    try {\r\n             " +
                    "           global::System.Xml.Schema.XmlSchema schema = null;\r\n                 " +
                    "       dsSchema.Write(s1);\r\n                        for (global::System.Collecti" +
                    "ons.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); " +
                    "schemas.MoveNext(); ) {\r\n                            schema = ((global::System.X" +
                    "ml.Schema.XmlSchema)(schemas.Current));\r\n                            s2.SetLengt" +
                    "h(0);\r\n                            schema.Write(s2);\r\n                          " +
                    "  if ((s1.Length == s2.Length)) {\r\n                                s1.Position =" +
                    " 0;\r\n                                s2.Position = 0;\r\n                         " +
                    "       for (; ((s1.Position != s1.Length) \r\n                                    " +
                    "        && (s1.ReadByte() == s2.ReadByte())); ) {\r\n                             " +
                    "       ;\r\n                                }\r\n                                if " +
                    "((s1.Position == s1.Length)) {\r\n                                    return type;" +
                    "\r\n                                }\r\n                            }\r\n            " +
                    "            }\r\n                    }\r\n                    finally {\r\n           " +
                    "             if ((s1 != null)) {\r\n                            s1.Close();\r\n     " +
                    "                   }\r\n                        if ((s2 != null)) {\r\n             " +
                    "               s2.Close();\r\n                        }\r\n                    }\r\n  " +
                    "              }\r\n                xs.Add(dsSchema);\r\n                return type;" +
                    "\r\n            }\r\n        }\r\n");
            this.Output.WriteLine();
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="table"></param>
        public virtual void RenderTableRow(System.Data.DataTable table)
        {
            this.Output.Write("        /// <summary>\r\n        ///Represents strongly named DataRow class.\r\n     " +
                    "   ///</summary>\r\n        public partial class ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" : global::System.Data.DataRow {\r\n            \r\n            private ");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(" ");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(";\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            internal ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("(global::System.Data.DataRowBuilder rb) : \r\n                    base(rb) {\r\n     " +
                    "           this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(" = ((");
            this.Output.Write( TableClassName(table) );
            this.Output.Write(")(this.Table));\r\n            }\r\n");
 foreach (System.Data.DataColumn column in table.Columns) { 
            this.Output.Write("\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( LangType(column.DataType) );
            this.Output.Write(" ");
            this.Output.Write( column.ColumnName );
            this.Output.Write(" {\r\n                get {\r\n    ");
 if (column.AllowDBNull) {
            this.Output.Write("\r\n                    try {\r\n                        return ((");
            this.Output.Write( LangType(column.DataType).Replace("System.", "global::System.") );
            this.Output.Write(")(this[this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Column]));\r\n                    }\r\n                    catch (global::System.Inva" +
                    "lidCastException e) {\r\n                        throw new global::System.Data.Str" +
                    "ongTypingException(\"The value for column \\\'");
            this.Output.Write( column.ColumnName );
            this.Output.Write("\\\' in table \\\'");
            this.Output.Write( table.TableName );
            this.Output.Write("\\\' is DBNull.\", e);\r\n                    }\r\n    ");
 } else { 
            this.Output.Write("\r\n                    return ((");
            this.Output.Write( LangType(column.DataType) );
            this.Output.Write(")(this[this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Column]));\r\n    ");
 } 
            this.Output.Write("\r\n                }\r\n                set {\r\n                    this[this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Column] = value;\r\n                }\r\n            }\r\n");
 } 
            this.Output.Write("\r\n");
 foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
    if (relation.ChildTable != table)
        continue;

            this.Output.Write("\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( relation.ParentTable.TableName );
            this.Output.Write("Row ");
            this.Output.Write( relation.ParentTable.TableName );
            this.Output.Write("Row");
            this.Output.Write( (RowClassName(table) == relation.ParentTable.TableName + "Row") ? "Parent" : "" );
            this.Output.Write(" {\r\n                get {\r\n                    return ((");
            this.Output.Write( relation.ParentTable.TableName );
            this.Output.Write("Row)(this.GetParentRow(this.Table.ParentRelations[\"");
            this.Output.Write( relation.RelationName );
            this.Output.Write("\"])));\r\n                }\r\n                set {\r\n                    this.SetPar" +
                    "entRow(value, this.Table.ParentRelations[\"");
            this.Output.Write( relation.RelationName );
            this.Output.Write("\"]);\r\n                }\r\n            }\r\n");
 } 
            this.Output.Write("        \r\n");
 foreach (System.Data.DataColumn column in table.Columns) 
    if (column.AllowDBNull) { 
            this.Output.Write("\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public bool Is");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Null() {\r\n                return this.IsNull(this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Column);\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public void Set");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Null() {\r\n                this[this.");
            this.Output.Write( TableVarName(table) );
            this.Output.Write(".");
            this.Output.Write( column.ColumnName );
            this.Output.Write("Column] = global::System.Convert.DBNull;\r\n            }\r\n");
 } 
            this.Output.Write("\r\n");
 foreach (System.Data.DataRelation relation in this._dataSet.Relations) { 
    if (relation.ParentTable != table)
        continue;

            this.Output.Write("\r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(relation.ChildTable) );
            this.Output.Write("[] Get");
            this.Output.Write( TablePropName(relation.ChildTable) );
            this.Output.Write("Rows() {\r\n                if ((this.Table.ChildRelations[\"");
            this.Output.Write( relation.RelationName );
            this.Output.Write("\"] == null)) {\r\n                    return new ");
            this.Output.Write( RowClassName(relation.ChildTable) );
            this.Output.Write("[0];\r\n                }\r\n                else {\r\n                    return ((");
            this.Output.Write( RowClassName(relation.ChildTable) );
            this.Output.Write("[])(base.GetChildRows(this.Table.ChildRelations[\"");
            this.Output.Write( relation.RelationName );
            this.Output.Write("\"])));\r\n                }\r\n            }\r\n");
 } 
            this.Output.Write("        \r\n        }");
            this.Output.WriteLine();
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="table"></param>
        public virtual void RenderTableRowChangeEvent(System.Data.DataTable table)
        {
            this.Output.Write("        /// <summary>\r\n        ///Row event argument class\r\n        ///</summary>" +
                    "\r\n        ");
            this.Output.Write( GeneratedCodeAttribute );
            this.Output.Write("\r\n        public class ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("ChangeEvent : global::System.EventArgs {\r\n            \r\n            private ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" eventRow;\r\n            \r\n            private global::System.Data.DataRowAction e" +
                    "ventAction;\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write("ChangeEvent(");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" row, global::System.Data.DataRowAction action) {\r\n                this.eventRow " +
                    "= row;\r\n                this.eventAction = action;\r\n            }\r\n            \r" +
                    "\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public ");
            this.Output.Write( RowClassName(table) );
            this.Output.Write(" Row {\r\n                get {\r\n                    return this.eventRow;\r\n       " +
                    "         }\r\n            }\r\n            \r\n            ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n            public global::System.Data.DataRowAction Action {\r\n                " +
                    "get {\r\n                    return this.eventAction;\r\n                }\r\n        " +
                    "    }\r\n        }");
            this.Output.WriteLine();
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        public virtual void RenderTableAdapters()
        {
            this.Output.Write("namespace ");
            this.Output.Write( base.ProjectItem.CodeNamespace);
            this.Output.Write(".");
            this.Output.Write( this._dataSet.DataSetName );
            this.Output.Write("TableAdapters {\r\n");
 foreach (System.Data.DataTable table in this._dataSet.Tables) { 
	var userTable = UserTableName(table);
/*	var tableAdp = _xDoc.Root.XPathSelectElement("DataSource/Tables/TableAdapter[@Name=\""  + name + "\"]");
        var colMapsX = tableAdp.XPathSelectElements("Mappings/Mapping");
        var colMaps = from cm in  colMapsX
                      select new { SourceColumn = cm.Attribute("SourceColumn"), DataSetColumn = cm.Attribute("DataSetColumn")};
					  */

            this.Output.Write(@"

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
	[global::System.ComponentModel.DesignerCategoryAttribute(""code"")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute(""Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"" +
        "", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute(""vs.data.TableAdapter"")]
	public partial class ");
            this.Output.Write( userTable );
            this.Output.Write(@"TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write("\r\n        public ");
            this.Output.Write( userTable );
            this.Output.Write("TableAdapter() {\r\n            this.ClearBeforeFill = true;\r\n        }\r\n        \r\n" +
                    "        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        ");
            this.Output.Write( NonUserAndGeneratedCodeAttribute );
            this.Output.Write(@"
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""System.Data.Design.TypedDataSetGenerator"", ""4.0.0.0"")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
       
	
            
");
 } 
            this.Output.Write("  \r\n\r\n}");
            this.Output.WriteLine();
        }
    }
}
