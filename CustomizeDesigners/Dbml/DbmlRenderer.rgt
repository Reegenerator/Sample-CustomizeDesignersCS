<%@ Template Language="C#" ClassName="DbmlRenderer" %>
<%@ Import Namespace="System" %>

#pragma warning disable 1591
 
// -------------------------------------------------------
// Automatically generated with Kodeo's Reegenerator
// Generator: CustomizeDesigners.Dbml.DbmlRenderer
// Generation date: <%= System.DateTime.Now.ToString("yyyy-MM-dd hh:mm") %>
// Generated by: <%= System.Security.Principal.WindowsIdentity.GetCurrent().Name %>
// -------------------------------------------------------

namespace <%= base.ProjectItem.CodeNamespace %>
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="<%= this._database.Name %>")]
	<%= GetAccessModifier(this._database.AccessModifier) %> partial class <%= this._database.Class %> : <%= string.IsNullOrEmpty(this._database.BaseType) ? "System.Data.Linq.DataContext" : this._database.BaseType %> 
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
	#region Extensibility Method Definitions
	partial void OnCreated();
<% RenderDatabaseExtensibility(); %>
	#endregion
	
		public <%= this._database.Class %>() : 
				base(global::<%= this._database.Connection.SettingsObjectName %>.Default.<%= this._database.Connection.SettingsPropertyName %>, mappingSource)
		{
			OnCreated();
		}

		public <%= this._database.Class %>(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public <%= this._database.Class %>(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public <%= this._database.Class %>(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public <%= this._database.Class %>(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
<% 
	RenderDatabaseTablesProperties(); 
	RenderDatabaseFunctions(); 
%>
	}
<% 
	RenderTables();
	RenderFunctionsResults(); 
%>
}
#pragma warning restore 1591

<%@ Method Name="RenderDatabaseTableExtensibility" %>
	<%@ Parameter Name="table" Type="Table" %>
	partial void Insert<%= table.Type.Name %>(<%= table.Type.Name %> instance);
	partial void Update<%= table.Type.Name %>(<%= table.Type.Name %> instance);
	partial void Delete<%= table.Type.Name %>(<%= table.Type.Name %> instance);
<%/ Method %>

<%@ Method Name="RenderDatabaseTableProperty" %>
	<%@ Parameter Name="table" Type="Table" %>
		public System.Data.Linq.Table< <%= table.Type.Name %> > <%= table.Member %>
		{
			get
			{
				return this.GetTable< <%= table.Type.Name %> >();
			}
		}
<%/ Method %>

<%@ Method Name="RenderTable" %>
	<%@ Parameter Name="table" Type="Table" %>
	[Table(Name="<%= table.Name %>")]
	<%= GetAccessModifier(table.AccessModifier) %> partial class <%= table.Type.Name %> : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

<% RenderTypePrivateProperties(table.Type); %>		

	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
<% RenderTableColumnsExtensibilities(table); %>
	#endregion
		
		public <%= table.Type.Name %>()
		{
<% RenderTableAssociationsInitializations(table); %>
			OnCreated();
		}
<%  RenderTableProperties(table); %>
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
<% RenderTableAssociationsAttachDetach(table); %>
	}	
<%/ Method %>

<%@ Method Name="RenderTableSimple" %>
	<%@ Parameter Name="table" Type="Table" %>
	[Table(Name="<%= table.Name %>")]
	<%= GetAccessModifier(table.AccessModifier) %> partial class <%= table.Type.Name %>
	{
<% RenderTypePrivateProperties(table.Type); %>		
		public <%= table.Type.Name %>()
		{
		}
<%  RenderTableProperties(table, true); %>
	}	
<%/ Method %>

<%@ Method Name="RenderColumnAsPrivateProperty" %>
	<%@ Parameter Name="column" Type="Column" %>
		private <%= ColumnType(column) %> _<%= column.Name %>;
<%/ Method %>

<%@ Method Name="RenderAssociationAsPrivateProperty" %>
	<%@ Parameter Name="association" Type="Association" %>
<% if (association.IsForeignKey) { %>	
		private EntityRef< <%= association.Type %> > _<%= association.Member %>;
<% } else { %>
		private EntitySet< <%= association.Type %> > _<%= association.Member %>;
<% } %>
<%/ Method %>

<%@ Method Name="RenderTableColumnExtensibility" %>
	<%@ Parameter Name="column" Type="Column" %>
    partial void On<%= column.Name %>Changing(<%= ColumnType(column) %> value);
    partial void On<%= column.Name %>Changed();
<%/ Method %>

<%@ Method Name="RenderTableAssociationInitialization" %>
	<%@ Parameter Name="association" Type="Association" %>
<% if (association.IsForeignKey) { %>	
			this._<%= association.Member %> = default(EntityRef< <%= association.Type %> >);
<% } else { %>
			this._<%= association.Member %> = new EntitySet< <%= association.Type %> >(new Action< <%= association.Type %> >(this.attach_<%= association.Member %>), new Action< <%= association.Type %> >(this.detach_<%= association.Member %>));
<% } %>
<%/ Method %>

<%@ Method Name="RenderColumnAsProperty" %>
	<%@ Parameter Name="table" Type="Table" %>
	<%@ Parameter Name="column" Type="Column" %>
		[Column(<%= GetPropertyAttributes(table, column) %>)]
		public <%= ColumnType(column) %> <%= column.Name %>
		{
			get
			{
				return this._<%= column.Name %>;
			}
			set
			{
				if ((this._<%= column.Name %> != value))
				{
<% RenderForeignKeysChecks(table, column); %>				
					this.On<%= column.Name %>Changing(value);
					this.SendPropertyChanging();
					this._<%= column.Name %> = value;
					this.SendPropertyChanged("<%= column.Name %>");
					this.On<%= column.Name %>Changed();
				}
			}
		}
<%/ Method %>

<%@ Method Name="RenderColumnAsPropertySimple" %>
	<%@ Parameter Name="table" Type="Table" %>
	<%@ Parameter Name="column" Type="Column" %>
		[Column(<%= GetPropertyAttributes(table, column) %>)]
		public <%= ColumnType(column) %> <%= column.Name %>
		{
			get
			{
				return this._<%= column.Name %>;
			}
			set
			{
				if ((this._<%= column.Name %> != value))
				{
					this._<%= column.Name %> = value;
				}
			}
		}
<%/ Method %>

<%@ Method Name="RenderForeignKeyCheck" %>
	<%@ Parameter Name="column" Type="Column" %>
	<%@ Parameter Name="association" Type="Association" %>
					if (this._<%= association.Member %>.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
<%/ Method %>

<%@ Method Name="RenderForeignKeyAssociationAsProperty" %>
	<%@ Parameter Name="association" Type="Association" %>
		[Association(Name="<%= association.Name %>", Storage="_<%= association.Member %>", OtherKey="<%= association.OtherKey %>")]
		public EntitySet< <%= association.Type %> > <%= association.Member %>
		{
			get
			{
				return this._<%= association.Member %>;
			}
			set
			{
				this._<%= association.Member %>.Assign(value);
			}
		}
<%/ Method %>

<%@ Method Name="RenderAssociationAsProperty" %>
	<%@ Parameter Name="table" Type="Table" %>
	<%@ Parameter Name="association" Type="Association" %>
		[Association(Name="<%= association.Name %>", Storage="_<%= association.Member %>"<%= RenderAssociationAsPropertyHelper3(association) %>, IsForeignKey=true)]
		public <%= association.Type %> <%= association.Member %>
		{
			get
			{
				return this._<%= association.Member %>.Entity;
			}
			set
			{
				<%= association.Type %> previousValue = this._<%= association.Member %>.Entity;
				if (((previousValue != value) 
							|| (this._<%= association.Member %>.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._<%= association.Member %>.Entity = null;
						previousValue.<%= table.Member %>.Remove(this);
					}
					this._<%= association.Member %>.Entity = value;
					if ((value != null))
					{
						value.<%= table.Member %>.Add(this);
						<%= RenderAssociationAsPropertyHelper1(table, association) %>
					}
					else
					{
						<%= RenderAssociationAsPropertyHelper2(table, association) %>
					}
					this.SendPropertyChanged("<%= association.Member %>");
				}
			}
		}
<%/ Method %>

<%@ Method Name="RenderTableAssociationAttachDetach" %>
	<%@ Parameter Name="table" Type="Table" %>
	<%@ Parameter Name="association" Type="Association" %>
	<%@ Parameter Name="parentAssociation" Type="Association" %>
		private void attach_<%= association.Member %>(<%= association.Type %> entity)
		{
			this.SendPropertyChanging();
			entity.<%= parentAssociation.Member %> = this;
		}
		
		private void detach_<%= association.Member %>(<%= association.Type %> entity)
		{
			this.SendPropertyChanging();
			entity.<%= parentAssociation.Member %> = null;
		}
<%/ Method %>

<%@ Method Name="RenderDatabaseSPReturningRecordset" %>
	<%@ Parameter Name="function" Type="Function" %>
		[Function(Name="<%= function.Name %>")]
		public ISingleResult< <%= ((Dbml.Type)function.Items[0]).Name %> > <%= function.Method %>(<%= GetFunctionParametersDeclare(function) %>)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))<%= GetFunctionParametersCall(function) %>);<%= RenderFillOutParameter(function) %>
			return ((ISingleResult< <%= ((Dbml.Type)function.Items[0]).Name %> >)(result.ReturnValue));
		}
<%/ Method %>

<%@ Method Name="RenderDatabaseSPReturningSingleValue" %>
	<%@ Parameter Name="function" Type="Function" %>
		[Function(Name="<%= function.Name %>")]
		public <%= LangType(((Return)function.Items[0]).Type) %> <%= function.Method %>(<%= GetFunctionParametersDeclare(function) %>)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))<%= GetFunctionParametersCall(function) %>);<%= RenderFillOutParameter(function) %>
			return ((<%= LangType(((Return)function.Items[0]).Type) %>)(result.ReturnValue));
		}
<%/ Method %>

<%@ Method Name="RenderFunctionResult" %>
	<%@ Parameter Name="function" Type="Function" %>
	<%@ Parameter Name="type" Type="Dbml.Type" %>
	<%= GetAccessModifier(function.AccessModifier) %> partial class <%= type.Name %>
	{
<% RenderTypePrivateProperties(type); %>		
		public <%= type.Name %>()
		{
		}
<%  RenderFunctionResultProperties(function); %>
	}	
<%/ Method %>

<%@ Method Name="RenderFunctionResultProperty" %>
	<%@ Parameter Name="type" Type="Dbml.Type" %>
	<%@ Parameter Name="column" Type="Column" %>
		[Column(<%= GetFunctionResultPropertyAttributes(type, column) %>)]
		public <%= ColumnType(column) %> <%= column.Name %>
		{
			get
			{
				return this._<%= column.Name %>;
			}
			set
			{
				if ((this._<%= column.Name %> != value))
				{
					this._<%= column.Name %> = value;
				}
			}
		}
<%/ Method %>

<%@ Method Name="RenderDatabaseFnSingleValue" %>
	<%@ Parameter Name="function" Type="Function" %>
		[Function(Name="<%= function.Name %>", IsComposable=true)]
		public System.Nullable< <%= LangType(((Return)function.Items[0]).Type) %> > <%= function.Method %>(<%= GetFunctionParametersDeclare(function) %>)
		{
			return ((System.Nullable< <%= LangType(((Return)function.Items[0]).Type) %> >)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))<%= GetFunctionParametersCall(function) %>).ReturnValue));
		}
<%/ Method %>

<%@ Method Name="RenderDatabaseFnRecordset" %>
	<%@ Parameter Name="function" Type="Function" %>
		[Function(Name="<%= function.Name %>", IsComposable=true)]
		public IQueryable< <%= ((Dbml.Type)function.Items[0]).Name %> > <%= function.Method %>(<%= GetFunctionParametersDeclare(function) %>)
		{
			return this.CreateMethodCallQuery< <%= ((Dbml.Type)function.Items[0]).Name %> >(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))<%= GetFunctionParametersCall(function) %>);
		}
<%/ Method %>